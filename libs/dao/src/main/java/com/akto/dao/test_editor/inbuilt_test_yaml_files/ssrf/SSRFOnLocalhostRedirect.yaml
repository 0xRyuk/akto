id: SSRF_ON_LOCALHOST_REDIRECT
info:
  name: "Sensitive localhost details exposed"
  description: "asdf"
  details: >
    "The endpoint appears to be vulnerable to Server Side Request Forgery attack. The original request was replayed by replacing the URI parameter with metadata endpoint provided by AWS. The application responded with 2XX success code and also gave out sensitive AWS information in response. Server-Side Request Forgery (SSRF) flaws occur whenever an API is fetching a remote resource without validating the user-supplied URL. It allows an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall or a VPN.\n
    "Modern concepts in application development make SSRF more common and more dangerous.\n"
    "More common - the following concepts encourage developers to access an external resource based on user input: Webhooks, file fetching from URLs, custom SSO, and URL previews.\n"
    "More dangerous - Modern technologies like cloud providers, Kubernetes, and Docker expose management and control channels over HTTP on predictable, well-known paths. Those channels are an easy target for an SSRF attack.\n"
    "It is also more challenging to limit outbound traffic from your application, because of the connected nature of modern applications.\n" +
    "The SSRF risk can not always be completely eliminated. While choosing a protection mechanism, it is important to consider the business risks and needs."
  impact: "Successful exploitation might compromise sensitive AWS information which attacker can use to get unauthorized access to AWS."
  category:
    name: SSRF
    shortName: Server Side Request Forgery
    displayName: Server Side Request Forgery (SSRF)
  subCategory: SSRF_ON_LOCALHOST_REDIRECT
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
api_selection_filters:
  response_code:
    and:
      gte: 200
      lt: 205
  or:
    - request_headers:
        for_one:
          value:
            contains_either:
                - http
          key:
            extract: url_key
    - request_payload:
        for_one:
          value:
            contains_either:
                - http
          key:
            extract: url_key
    - query_param:
        for_one:
          value:
            contains_either:
                - http
          key:
            extract: url_key

execute:
  type: single
  requests:
    - req:
        - modify_query_param:
            url_key: http://localhost/admin
        - modify_body_param:
            url_key: http://localhost/admin
        - modify_header:
            url_key: http://localhost/admin

validate:
  response_payload:
    contains_either:
      - "admin"
